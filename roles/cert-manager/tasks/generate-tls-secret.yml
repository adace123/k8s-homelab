- name: Check for cert secret
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    name: cert-manager-key
    namespace: cert-manager
  register: existing_cert_secret

- name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
  community.crypto.openssl_privatekey:
    path: "{{ playbook_dir }}/letsencrypt_k8s.pem"
  when: "recreate_tls_cert or not existing_cert_secret['resources']"

- name: Generate an OpenSSL Certificate Signing Request with Subject information
  community.crypto.openssl_csr:
    path: "{{ playbook_dir }}/letsencrypt_k8s.csr"
    privatekey_path: "{{ playbook_dir }}/letsencrypt_k8s.pem"
    country_name: US
    organization_name: k8s
    common_name: "*.kube.local.io"

- name: Generate a Self Signed OpenSSL certificate
  community.crypto.x509_certificate:
    provider: selfsigned
    path: "{{ playbook_dir }}/letsencrypt_k8s.crt"
    privatekey_path: "{{ playbook_dir }}/letsencrypt_k8s.pem"
    csr_path: "{{ playbook_dir }}/letsencrypt_k8s.csr"
    subject:
      commonName: "*.kube.local.io"
  when: "recreate_tls_cert or not existing_cert_secret['resources']"

- name: Create K8S TLS cert secret YAML from template
  template:
    src: "{{ playbook_dir }}/roles/cert-manager/templates/tls-secret.yaml.j2"
    dest: "{{ playbook_dir }}/tls-secret.yaml"
  vars:
    tls_crt: "{{ lookup('file', '{{ playbook_dir }}/letsencrypt_k8s.crt') | b64encode }}"
    tls_key: "{{ lookup('file', '{{ playbook_dir }}/letsencrypt_k8s.pem') | b64encode }}"
    name: cert-manager-key
    namespace: cert-manager
  when: "recreate_tls_cert or not existing_cert_secret['resources']"

- name: Create K8S TLS cert secret
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', '{{ playbook_dir }}/tls-secret.yaml') | from_yaml }}"
  when: "recreate_tls_cert or not existing_cert_secret['resources']"
